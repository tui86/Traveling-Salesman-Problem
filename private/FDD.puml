@startuml
' Force general graph mode instead of component mode
!pragma layout smetana
left to right direction
skinparam packageStyle rectangle
skinparam handwritten false
skinparam rectangle {
  BackgroundColor #F8F9FA
  BorderColor #2C3E50
  FontSize 12
}

title Functional Decomposition Diagram (FDD) - Solve TSP

package "Solve TSP" {

  package "1. Input & Validate" {
    rectangle "1.1 Read input:\nfrom keyboard or file input.txt"
    rectangle "1.2 Parse input:\nnumber of cities (n), cost matrix C[i][j]"
    rectangle "1.3 Validate input:\ncheck n>1, C[i][j]>=0, symmetry"
    rectangle "1.4 Initialize data structures:\npath[], visited[], minCost=INF"
  }

  package "2. Choose Algorithm" {
    rectangle "2.1 Backtracking:\nexhaustive search, track min cost"
    rectangle "2.2 Greedy:\nnearest neighbor heuristic"
    rectangle "2.3 DP / Bitmask:\noptimized dynamic programming"
    rectangle "2.4 Compare algorithms:\ncost, runtime, memory"
  }

  package "3. Execute Algorithm(s)" {
    rectangle "3.1 Prepare inputs:\nset start node, reset structures"
    rectangle "3.2 Run all algorithm(s):\n-compute route and total cost"
    rectangle "3.3 Store all result:\nRoutes[[], [], []], Costs[x1, x2, x3], Times[y1, y2, y3]"
  }

  package "4. Evaluate & Return Result" {
    rectangle "4.1 Format output:\ncost, route, runtime"
    rectangle "4.2 Display result:\ne.g. 'Chi phi toi thieu: 97\nLo trinh: 0 1 2 3 0'"
    rectangle "4.3 Visualize route:\n(optional map/graph)"
    rectangle "4.4 Export result:\nwrite to output.txt"
  }
}

' Flow arrows to show process order
"1.1 Read input:\nfrom keyboard or file input.txt" --> "1.2 Parse input:\nnumber of cities (n), cost matrix C[i][j]"
"1.2 Parse input:\nnumber of cities (n), cost matrix C[i][j]" --> "1.3 Validate input:\ncheck n>1, C[i][j]>=0, symmetry"
"1.3 Validate input:\ncheck n>1, C[i][j]>=0, symmetry" --> "1.4 Initialize data structures:\npath[], visited[], minCost=INF"
"1.4 Initialize data structures:\npath[], visited[], minCost=INF" --> "3.1 Prepare inputs:\nset start node, reset structures"

"2.1 Backtracking:\nexhaustive search, track min cost" --> "3.2 Run all algorithm(s):\n-compute route and total cost"
"2.2 Greedy:\nnearest neighbor heuristic" --> "3.2 Run all algorithm(s):\n-compute route and total cost"
"2.3 DP / Bitmask:\noptimized dynamic programming" --> "3.2 Run all algorithm(s):\n-compute route and total cost"

"3.1 Prepare inputs:\nset start node, reset structures" --> "3.2 Run all algorithm(s):\n-compute route and total cost"
"3.2 Run all algorithm(s):\n-compute route and total cost" --> "3.3 Store all result:\nRoutes[[], [], []], Costs[x1, x2, x3], Times[y1, y2, y3]"

"3.3 Store all result:\nRoutes[[], [], []], Costs[x1, x2, x3], Times[y1, y2, y3]" --> "4.1 Format output:\ncost, route, runtime"

"4.1 Format output:\ncost, route, runtime" --> "4.2 Display result:\ne.g. 'Chi phi toi thieu: 97\nLo trinh: 0 1 2 3 0'"
"4.1 Format output:\ncost, route, runtime" --> "4.3 Visualize route:\n(optional map/graph)"
"4.1 Format output:\ncost, route, runtime" --> "4.4 Export result:\nwrite to output.txt"
@enduml